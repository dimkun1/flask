# üìå –°–æ–∑–¥–∞—Ç—å API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ
# –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Movie —Å –ø–æ–ª—è–º–∏ id, title, description –∏ genre.
# üìå –°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ movies –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤.
# üìå –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É (–º–µ—Ç–æ–¥ GET).
# üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞.


from typing import Optional
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import logging
import uvicorn
from random import randint as rnd

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()


class Genre(BaseModel):
    id: int
    name: str


class MovieIn(BaseModel):
    title: str
    description: Optional[str] = "–°–≤–æ–±–æ–¥–Ω–æ–µ –ø–æ–ª–µ"
    genre: int


class Movie(MovieIn):
    id: int


movies = [
    Movie(id=1, title='Movie_1', description='first movie', genre=1),
    Movie(id=2, title='Movie_2', description='second movie', genre=1),
    Movie(id=3, title='Movie_3', description='third movie', genre=4),
    Movie(id=4, title='Movie_4', description='fourth movie', genre=3)
]

genres = [
    Genre(id=1, name='comedy'),
    Genre(id=2, name='fantasy'),
    Genre(id=3, name='action'),
    Genre(id=4, name='thriller'),
]


@app.get('/', response_model=list[Movie], summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤', tags=['–ì–ª–∞–≤–Ω–∞—è'])
async def root():
    logger.info('–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤')
    return movies


@app.get('/{genre_name}', response_model=list[Movie], summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É', tags=['–§–∏–ª—å–º—ã'])
async def find_films(genre_name: str):
    genre_id = 0
    for genre in genres:
        if genre.name == genre_name:
            genre_id = genre.id
    result_list = []
    # result_list.clear()
    for movie in movies:
        if movie.genre == genre_id:
            result_list.append(movie)
    logger.info(f'–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –≤ –∂–∞–Ω—Ä–µ {genre_name}')
    return result_list


@app.post("/movies/", response_model=Movie, summary='–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º', tags=['–§–∏–ª—å–º—ã'])
async def add_movie(movie: MovieIn):
    id = len(movies) + 1
    new_movie = Movie(
        id=id,
        title=movie.title,
        description=movie.description,
        genre=movie.genre
    )
    movies.append(new_movie)
    logger.info(f'–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–ª—å–º {movie.title}')
    return new_movie


if __name__ == '__main__':
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)